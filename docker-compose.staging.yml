# Docker Compose configuration for staging environment

version: '3.8'

services:
  # Staging API service
  riskintel360-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: riskintel360-staging-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=staging
      - DEBUG=false
      - LOG_LEVEL=INFO
      - API_HOST=0.0.0.0
      - API_PORT=8000
    env_file:
      - .env.staging
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      condition: service_healthy
    networks:
      - riskintel360-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Staging PostgreSQL with production-like settings
  postgres:
    image: postgres:15-alpine
    container_name: riskintel360-staging-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=riskintel360_staging
      - POSTGRES_USER=riskintel360_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql
      - ./scripts/postgres.conf:/etc/postgresql/postgresql.conf
    networks:
      - riskintel360-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U riskintel360_user -d riskintel360_staging"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=512MB
      -c effective_cache_size=1536MB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Staging Redis with persistence
  image: redis:7-alpine
    container_name: riskintel360-staging-redis
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_staging_data:/data
      - ./scripts/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - riskintel360-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    command: >
      redis-server /usr/local/etc/redis/redis.conf
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Nginx reverse proxy for staging
  nginx:
    image: nginx:alpine
    container_name: riskintel360-staging-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/staging.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - riskintel360-api
    networks:
      - riskintel360-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

volumes:
  postgres_staging_data:
    driver: local
networks:
  riskintel360-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
