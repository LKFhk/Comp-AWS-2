version: '3.8'

services:
  # PostgreSQL Database with enhanced configuration
  postgres:
    image: postgres:15-alpine
    container_name: riskintel360-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=riskintel360
      - POSTGRES_USER=riskintel360_user
      - POSTGRES_PASSWORD=riskintel360_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - riskintel360-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U riskintel360_user -d riskintel360"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100


  # Development API service with hot-reload
  riskintel360-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: riskintel360-dev-api
    ports:
      - "8000:8000"
      - "5678:5678"  # Debug port for Python debugger
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_RELOAD=true
      - DATABASE_URL=postgresql://riskintel360_user:riskintel360_password@postgres:5432/riskintel360
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      # Fintech API Configuration
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY:-demo_key}
      - YAHOO_FINANCE_API_KEY=${YAHOO_FINANCE_API_KEY:-demo_key}
      - FRED_API_KEY=${FRED_API_KEY:-demo_key}
      - SEC_EDGAR_API_KEY=${SEC_EDGAR_API_KEY:-demo_key}
      - TREASURY_API_KEY=${TREASURY_API_KEY:-demo_key}
      - NEWS_API_KEY=${NEWS_API_KEY:-demo_key}
      # ML Configuration
      - ML_MODEL_PATH=/app/models
      - FRAUD_DETECTION_THRESHOLD=0.8
      - ML_BATCH_SIZE=1000
      - ML_INFERENCE_TIMEOUT=30
      # AWS Configuration for local development
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      # Bedrock Configuration
      - BEDROCK_REGION=${BEDROCK_REGION:-us-east-1}
      - BEDROCK_MODEL_REGULATORY=${BEDROCK_MODEL_REGULATORY:-anthropic.claude-3-haiku-20240307-v1:0}
      - BEDROCK_MODEL_FRAUD=${BEDROCK_MODEL_FRAUD:-anthropic.claude-3-sonnet-20240229-v1:0}
      - BEDROCK_MODEL_RISK=${BEDROCK_MODEL_RISK:-anthropic.claude-3-opus-20240229-v1:0}
      - BEDROCK_MODEL_MARKET=${BEDROCK_MODEL_MARKET:-anthropic.claude-3-sonnet-20240229-v1:0}
      - BEDROCK_MODEL_KYC=${BEDROCK_MODEL_KYC:-anthropic.claude-3-haiku-20240307-v1:0}
    env_file:
      - .env
    volumes:
      - .:/app:cached
      - ./logs:/app/logs

      - /app/__pycache__
      - /app/.pytest_cache
      - pip_cache:/root/.cache/pip
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - riskintel360-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        python -c 'import time; time.sleep(5)' &&
        echo 'Starting development server with hot-reload...' &&
        uvicorn riskintel360.api.main:app 
        --reload 
        --host 0.0.0.0 
        --port 8000 
        --reload-dir /app/riskintel360 
        --log-level debug
      "
    profiles:
      - dev

  # Production API service
  riskintel360-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: riskintel360-api
    ports:
      - "8001:8000"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DATABASE_URL=postgresql://riskintel360_user:riskintel360_password@postgres:5432/riskintel360
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - riskintel360-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - prod

  # Database administration tool (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: riskintel360-pgadmin
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@riskintel360.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - riskintel360-network
    restart: unless-stopped
    profiles:
      - tools



volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  pip_cache:
    driver: local

networks:
  riskintel360-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
